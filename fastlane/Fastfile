before_all do
    ensure_git_branch( branch: 'main' )
    ensure_git_status_clean
    git_pull
end

platform :ios do
    private_lane :update_version do
        app_store_version = get_app_store_version_number(bundle_id: 'urbanfitsample')
        plist_version = get_version_number_from_plist(xcodeproj: './ios/urbanfitsample.xcodeproj')
        if Gem::Version.new(plist_version.to_f) == Gem::Version.new(app_store_version.to_f)
            UI.message "bumping minor"
            increment_version_number_in_plist(xcodeproj: './ios/urbanfitsample.xcodeproj', bump_type: 'minor')
        else
            UI.message "bumping patch"
            increment_version_number_in_plist(xcodeproj: './ios/urbanfitsample.xcodeproj', bump_type: 'patch')
        end
    end

    private_lane :staging_build do
        increment_build_number_in_plist(xcodeproj: './ios/urbanfitsample.xcodeproj', target: 'urbanfitsample')
        gym(scheme: 'urbanfitsample-staging', workspace: './ios/urbanfitsample.xcworkspace')
    end

    private_lane :release_build do
        increment_build_number_in_plist(xcodeproj: './ios/urbanfitsample.xcodeproj', target: 'urbanfitsample')
        gym(scheme: 'urbanfitsample-release', workspace: './ios/urbanfitsample.xcworkspace')
    end

    private_lane :screenshots do
        Dir.chdir('..') do
            # run in parent directory
            sh('detox', 'build -c ios')
            sh('detox', 'test -c ios')
        end
    end

    lane :beta do
        staging_build
        upload_to_testflight(username: 'youremail@gmail.com', app_identifier: 'ReactNativeFastlane')
        commit_version_bump(message: 'bump build')
        push_to_git_remote
    end

    lane :release do
        release_build
        screenshots
        deliver
        commit_version_bump(message: 'bump build')
        push_to_git_remote
    end
end

platform :android do
    desc "Android build and release to beta"
    lane :beta do
        increment_version_code(app_folder_name: './android/app')
        gradle(task: 'clean', project_dir: './android/')
        gradle(task: 'bundle', build_type: 'Release', project_dir: './android')
        supply(track: 'beta', aab: './android/app/build/outputs/bundle/release/app-release.aab')
    end

    desc "Android distribution to firebase"
    lane :distribute do
        build_android_app(
           task: "assemble",
           flavor: "GotNoClue",
           build_type: "Release"
        )

        firebase_app_distribution(
            app: "1:179379279680:android:9fcb61952165e497700ca5",
            testers: "paschalidi.chris@gmail.com, avramis.sp@gmail.com",
            release_notes: "A new release is being out, check it ;)"
        )
    end

    lane :release do
        increment_version_code(app_folder_name: './android/app')
        increment_version_name(app_folder_name: './android/app', bump_type: 'patch')
        gradle(task: 'clean', project_dir: './android/')
        gradle(task: 'bundle', build_type: 'Release', project_dir: './android')
        supply(track: 'production', aab: './android/app/build/outputs/bundle/release/app-release.aab', release_status: 'draft')
    end
end