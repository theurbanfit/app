before_all do
end

platform :ios do
    desc "Push a new beta build to TestFlight"
    lane :beta do
        match
        increment_build_number(xcodeproj: "./ios/urbanfitsample.xcodeproj")
        build_app(workspace: "./ios/urbanfitsample.xcworkspace", scheme: "urbanfitsample")
        upload_to_testflight
    end


    desc "Ios distribution to firebase"
    lane :distribution do
        firebase_app_distribution(
            app: "1:179379279680:ios:c8c4c9282efebdb5700ca5",
            testers: "paschalidi.chris@gmail.com, avramis.sp@gmail.com",
            release_notes: "A new release is being out, check it ;)",
            ipa_path: './ios/urbanfitsample.ipa',
        )
    end
    desc 'GitHub actions release'
    lane :version do |options|
      updateVersion(options)
      increment_build_number(xcodeproj: '[Your Project Name].xcodeproj')
    end

    lane :github do |_options|
      create_keychain(
        name: 'ios_app_keychain',
        password: 'XXXXXXXXX',
        timeout: 1800,
        default_keychain: true,
        unlock: true,
        lock_when_sleeps: false
      )
      import_certificate(
        certificate_path: 'distribution.p12',
        certificate_password: 'XXXXXXXXXXX',
        keychain_name: 'ios_app_keychain',
        keychain_password: 'XXXXXXXXX'
      )


      install_provisioning_profile(path: 'distribution.mobileprovision')

      update_project_provisioning(
        xcodeproj: 'urbanfitsample.xcodeproj',
        target_filter: 'github',
        profile: 'distribution.mobileprovision',
        build_configuration: 'Release'
      )
      api_key = app_store_connect_api_key(
        key_id: 'XXXXXXXXXXXXx',
        issuer_id: 'XXXXXXX-XXXXXXXXXXXXX-XXXXXXXXXXX',
        key_filepath: 'distribution.p8'
      )

      build_app(workspace: '[Your Project Name].xcworkspace', scheme: '[Your Project Name]')
      upload_to_app_store(
        force: true,
        reject_if_possible: true,
        skip_metadata: false,
        skip_screenshots: true,
        languages: ['ko'],
        release_notes: {
          'default' => 'bug fixed',
          'ko' => 'bug fixed'
        },
        submit_for_review: true,
        precheck_include_in_app_purchases: false,
        automatic_release: true,
        submission_information: {
          add_id_info_uses_idfa: true,
          add_id_info_serves_ads: true,
          add_id_info_tracks_install: true,
          add_id_info_tracks_action: false,
          add_id_info_limits_tracking: true,
          export_compliance_encryption_updated: false
        },
        api_key: api_key
      )
    end
end

platform :android do
    desc "Android build and distribution to firebase"
    lane :distribution do
        gradle(task: 'clean', project_dir: './android/')
        build_android_app(
          task: 'assemble',
          build_type: 'Release',
          gradle_path: './gradlew',
          project_dir: './android',
        )

        firebase_app_distribution(
            app: ENV['FIREBASE_APP_ID_ANDROID'],
            firebase_cli_token: ENV['FIREBASE_CLI_TOKEN'],
            testers: "paschalidi.chris@gmail.com, avramis.sp@gmail.com",
            release_notes: "A new release is being out, check it ;)"
        )
    end

    desc "Android build and release to beta"
    lane :beta do
        increment_version_code(app_folder_name: './android/app')
        gradle(task: 'clean', project_dir: './android/')
        gradle(task: 'bundle', build_type: 'Release', project_dir: './android')
        supply(track: 'beta', aab: './android/app/build/outputs/bundle/release/app-release.aab')
    end


    lane :release do
        increment_version_code(app_folder_name: './android/app')
        increment_version_name(app_folder_name: './android/app', bump_type: 'patch')
        gradle(task: 'clean', project_dir: './android/')
        gradle(task: 'bundle', build_type: 'Release', project_dir: './android')
        supply(track: 'production', aab: './android/app/build/outputs/bundle/release/app-release.aab', release_status: 'draft')
    end
end